using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace DTTelegramReceiver
{
    public class MQL5Exporter
    {
        public string ExportBacktestResults(BacktestResult result, string expertName = "DaneTradesSignalEA")
        {
            var sb = new StringBuilder();

            // EA Header
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine($"//|                                                {expertName}.mq5 |");
            sb.AppendLine("//|                                  Generated by DaneTrades Backtester |");
            sb.AppendLine($"//|                                                Generated: {DateTime.Now:yyyy.MM.dd HH:mm} |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine();

            // Includes and properties
            sb.AppendLine("#property copyright \"DaneTrades\"");
            sb.AppendLine("#property link      \"https://danetrades.com\"");
            sb.AppendLine("#property version   \"1.00\"");
            sb.AppendLine();
            sb.AppendLine("#include <Trade\\Trade.mqh>");
            sb.AppendLine("CTrade trade;");
            sb.AppendLine();

            // Input parameters
            sb.AppendLine("//--- Input parameters");
            sb.AppendLine("input double   LotSize = 0.01;           // Lot size");
            sb.AppendLine("input int      MagicNumber = 12345;      // Magic number");
            sb.AppendLine("input bool     UseStopLoss = true;       // Use stop loss");
            sb.AppendLine("input bool     UseTakeProfit = true;     // Use take profit");
            sb.AppendLine("input int      Slippage = 3;             // Slippage in points");
            sb.AppendLine();

            // Global variables
            sb.AppendLine("//--- Global variables");
            sb.AppendLine("datetime lastBarTime = 0;");
            sb.AppendLine("bool signalsExecuted = false;");
            sb.AppendLine();

            // Signal structure
            sb.AppendLine("//--- Signal structure");
            sb.AppendLine("struct SignalData");
            sb.AppendLine("{");
            sb.AppendLine("   datetime time;");
            sb.AppendLine("   string symbol;");
            sb.AppendLine("   int action;        // 0=BUY, 1=SELL, 2=CLOSE");
            sb.AppendLine("   double entry;");
            sb.AppendLine("   double stopLoss;");
            sb.AppendLine("   double takeProfit;");
            sb.AppendLine("   string channel;");
            sb.AppendLine("};");
            sb.AppendLine();

            // Generate signals array
            GenerateSignalsArray(sb, result);

            // OnInit function
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Expert initialization function                                   |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("int OnInit()");
            sb.AppendLine("{");
            sb.AppendLine("   trade.SetExpertMagicNumber(MagicNumber);");
            sb.AppendLine("   trade.SetDeviationInPoints(Slippage);");
            sb.AppendLine("   ");
            sb.AppendLine($"   Print(\"DaneTrades Signal EA initialized - {result.TotalTrades} signals loaded\");");
            sb.AppendLine("   return(INIT_SUCCEEDED);");
            sb.AppendLine("}");
            sb.AppendLine();

            // OnTick function
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Expert tick function                                             |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("void OnTick()");
            sb.AppendLine("{");
            sb.AppendLine("   // Check for new bar");
            sb.AppendLine("   datetime currentBarTime = iTime(_Symbol, PERIOD_CURRENT, 0);");
            sb.AppendLine("   if(currentBarTime == lastBarTime) return;");
            sb.AppendLine("   lastBarTime = currentBarTime;");
            sb.AppendLine();
            sb.AppendLine("   // Execute signals based on time");
            sb.AppendLine("   ExecuteSignals();");
            sb.AppendLine("}");
            sb.AppendLine();

            // ExecuteSignals function
            GenerateExecuteSignalsFunction(sb, result);

            // Helper functions
            GenerateHelperFunctions(sb);

            return sb.ToString();
        }

        private void GenerateSignalsArray(StringBuilder sb, BacktestResult result)
        {
            sb.AppendLine("//--- Hardcoded signals from backtest");
            sb.AppendLine($"SignalData signals[{result.Trades.Count}] = {{");

            for (int i = 0; i < result.Trades.Count; i++)
            {
                var trade = result.Trades[i];
                var action = trade.Action == "BUY" ? "0" : "1";
                
                sb.AppendLine($"   {{{FormatDateTime(trade.EntryTime)}, \"{trade.Symbol}\", {action}, " +
                             $"{trade.EntryPrice:F5}, {trade.StopLoss:F5}, {trade.TakeProfit:F5}, \"{trade.ChannelName}\"}}" +
                             (i < result.Trades.Count - 1 ? "," : ""));
            }

            sb.AppendLine("};");
            sb.AppendLine();
        }

        private void GenerateExecuteSignalsFunction(StringBuilder sb, BacktestResult result)
        {
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Execute signals based on current time                           |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("void ExecuteSignals()");
            sb.AppendLine("{");
            sb.AppendLine("   datetime currentTime = TimeCurrent();");
            sb.AppendLine("   ");
            sb.AppendLine($"   for(int i = 0; i < {result.Trades.Count}; i++)");
            sb.AppendLine("   {");
            sb.AppendLine("      // Check if signal time has arrived (within 1 hour tolerance)");
            sb.AppendLine("      if(currentTime >= signals[i].time && currentTime <= signals[i].time + 3600)");
            sb.AppendLine("      {");
            sb.AppendLine("         // Check if this signal was already executed");
            sb.AppendLine("         if(IsSignalExecuted(signals[i].time, signals[i].symbol, signals[i].action))");
            sb.AppendLine("            continue;");
            sb.AppendLine("            ");
            sb.AppendLine("         // Execute the signal");
            sb.AppendLine("         if(signals[i].action == 0) // BUY");
            sb.AppendLine("         {");
            sb.AppendLine("            ExecuteBuySignal(signals[i]);");
            sb.AppendLine("         }");
            sb.AppendLine("         else if(signals[i].action == 1) // SELL");
            sb.AppendLine("         {");
            sb.AppendLine("            ExecuteSellSignal(signals[i]);");
            sb.AppendLine("         }");
            sb.AppendLine("         else if(signals[i].action == 2) // CLOSE");
            sb.AppendLine("         {");
            sb.AppendLine("            ClosePositions(signals[i].symbol);");
            sb.AppendLine("         }");
            sb.AppendLine("      }");
            sb.AppendLine("   }");
            sb.AppendLine("}");
            sb.AppendLine();
        }

        private void GenerateHelperFunctions(StringBuilder sb)
        {
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Execute buy signal                                               |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("void ExecuteBuySignal(SignalData &signal)");
            sb.AppendLine("{");
            sb.AppendLine("   double ask = SymbolInfoDouble(signal.symbol, SYMBOL_ASK);");
            sb.AppendLine("   double sl = UseStopLoss && signal.stopLoss > 0 ? signal.stopLoss : 0;");
            sb.AppendLine("   double tp = UseTakeProfit && signal.takeProfit > 0 ? signal.takeProfit : 0;");
            sb.AppendLine("   ");
            sb.AppendLine("   if(trade.Buy(LotSize, signal.symbol, ask, sl, tp, ");
            sb.AppendLine("      StringFormat(\"DT Signal BUY %s from %s\", signal.symbol, signal.channel)))");
            sb.AppendLine("   {");
            sb.AppendLine("      Print(\"BUY order executed for \", signal.symbol, \" at \", ask);");
            sb.AppendLine("   }");
            sb.AppendLine("   else");
            sb.AppendLine("   {");
            sb.AppendLine("      Print(\"Failed to execute BUY order for \", signal.symbol, \". Error: \", GetLastError());");
            sb.AppendLine("   }");
            sb.AppendLine("}");
            sb.AppendLine();

            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Execute sell signal                                              |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("void ExecuteSellSignal(SignalData &signal)");
            sb.AppendLine("{");
            sb.AppendLine("   double bid = SymbolInfoDouble(signal.symbol, SYMBOL_BID);");
            sb.AppendLine("   double sl = UseStopLoss && signal.stopLoss > 0 ? signal.stopLoss : 0;");
            sb.AppendLine("   double tp = UseTakeProfit && signal.takeProfit > 0 ? signal.takeProfit : 0;");
            sb.AppendLine("   ");
            sb.AppendLine("   if(trade.Sell(LotSize, signal.symbol, bid, sl, tp, ");
            sb.AppendLine("      StringFormat(\"DT Signal SELL %s from %s\", signal.symbol, signal.channel)))");
            sb.AppendLine("   {");
            sb.AppendLine("      Print(\"SELL order executed for \", signal.symbol, \" at \", bid);");
            sb.AppendLine("   }");
            sb.AppendLine("   else");
            sb.AppendLine("   {");
            sb.AppendLine("      Print(\"Failed to execute SELL order for \", signal.symbol, \". Error: \", GetLastError());");
            sb.AppendLine("   }");
            sb.AppendLine("}");
            sb.AppendLine();

            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Close all positions for symbol                                  |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("void ClosePositions(string symbol)");
            sb.AppendLine("{");
            sb.AppendLine("   for(int i = PositionsTotal() - 1; i >= 0; i--)");
            sb.AppendLine("   {");
            sb.AppendLine("      if(PositionGetSymbol(i) == symbol && PositionGetInteger(POSITION_MAGIC) == MagicNumber)");
            sb.AppendLine("      {");
            sb.AppendLine("         trade.PositionClose(PositionGetTicket(i));");
            sb.AppendLine("         Print(\"Closed position for \", symbol);");
            sb.AppendLine("      }");
            sb.AppendLine("   }");
            sb.AppendLine("}");
            sb.AppendLine();

            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("//| Check if signal was already executed                            |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine("bool IsSignalExecuted(datetime signalTime, string symbol, int action)");
            sb.AppendLine("{");
            sb.AppendLine("   // Simple check - in real implementation, you might want to store executed signals");
            sb.AppendLine("   // For now, we'll check if there's already a position open for this symbol");
            sb.AppendLine("   for(int i = 0; i < PositionsTotal(); i++)");
            sb.AppendLine("   {");
            sb.AppendLine("      if(PositionGetSymbol(i) == symbol && PositionGetInteger(POSITION_MAGIC) == MagicNumber)");
            sb.AppendLine("      {");
            sb.AppendLine("         return true; // Position already exists");
            sb.AppendLine("      }");
            sb.AppendLine("   }");
            sb.AppendLine("   return false;");
            sb.AppendLine("}");
        }

        private string FormatDateTime(DateTime dateTime)
        {
            return $"D'{dateTime:yyyy.MM.dd HH:mm:ss}'";
        }

        public void SaveToFile(string mql5Code, string filePath)
        {
            File.WriteAllText(filePath, mql5Code, Encoding.UTF8);
        }

        public string GenerateSimpleEA(List<ParsedSignal> signals, string expertName = "DaneTradesSignalEA")
        {
            var sb = new StringBuilder();

            // Simple EA template with hardcoded signals
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine($"//|                                                {expertName}.mq5 |");
            sb.AppendLine("//|                                  Generated by DaneTrades Backtester |");
            sb.AppendLine($"//|                                                Generated: {DateTime.Now:yyyy.MM.dd HH:mm} |");
            sb.AppendLine("//+------------------------------------------------------------------+");
            sb.AppendLine();
            sb.AppendLine("#include <Trade\\Trade.mqh>");
            sb.AppendLine("CTrade trade;");
            sb.AppendLine();
            sb.AppendLine("input double LotSize = 0.01;");
            sb.AppendLine("input int MagicNumber = 12345;");
            sb.AppendLine();

            // Add signal execution logic based on the parsed signals
            sb.AppendLine("int OnInit() { return INIT_SUCCEEDED; }");
            sb.AppendLine();
            sb.AppendLine("void OnTick()");
            sb.AppendLine("{");
            sb.AppendLine("   // Add your signal execution logic here");
            sb.AppendLine("   // Based on the parsed signals from Telegram");
            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}